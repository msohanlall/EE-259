\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
\_                                                                      \_
\_    THE CITY COLLEGE OF NEW YORK, ELECTRICAL ENGINERING DEPARTMENT    \_
\_               EE259, DAY-EVENING SECTIONS, Fall 2015                 \_
\_                                                                      \_
\_                              PROJECT 1                               \_
\_                                                                      \_
\_                 DUE DATE: Thursday 9:00 PM Oct 01, 2015              \_
\_                                                                      \_
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

If you write your class definition into a file called p1.h, you can see 
how your program will be partially graded by using the following command:

c
(make sure that you type this command in the working directory containing
p1.h file)

A temporary grading result will be shown on your screen. For a detailed 
report you can check the file called "report.p1" which will be created 
automatically in your working directory. 

IMPORTANT NOTE: After you check your program by using grademe_p1, you still 
have to send your program to ee259 account (with subject field: p1) to be 
officially graded.  Otherwise, you will receive NO credit for your project!

GRADING:        3 grademe tests: 60 points
                2 secret tests: 40 points

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_
\_                                                                    \_
\_   In your e-mail, the subject field  should be: p1 	              \_
\_                                                                    \_
\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

PROJECT 1 DESCRIPTION:

Write a C++ class called BOOK_SEARCH to perform several operations related 
to a database of books. You should create this class into a file called p1.h. 
The input and output files are called in.1 and out.1, respectively.  
The prototype for the  class BOOK_SEARCH is defined as follows:

  class BOOK_SEARCH{

   public:      // public methods for this class

        BOOK_SEARCH(int);       // example: b.BOOK_SEARCH(x);
				// constructor where integer x is the
				// num of books in the database;

        void FIND_ISBN(int);    // example: b.FIND_ISBN(i);
				// method to find the book with
				// given ISBN of i;
                                // returns no values;

        void LIST_YEAR(int);    // example: b.LIST_YEAR(y);
				// method to list the books
				// published in year y, or after;
                                // returns no values;

        void LIST_BOOKS(int,float);    // example: b.LIST_BOOKS(y, p);
				// method to list the books that are
				// published in year y or after with the
				// price less than or equal to p;
                                 // returns no values;

   private: // private variables accessible by the methods only
	    // (not from main)

        int n;  // no of books
	int ISBN[100]; // max 100 ISBN numbers
        char TITLE[100][80]; // max 100 books, each title with max 80 chars
			     // (there are no spaces in each title)
	char AUTHOR[100][20];	// max 100 books, each author name with 
				// max 20 chars 
			        // (there are no spaces in each author name)
	char PUBLISHER[100][15]; // max 100 books, each publisher name with
				// max 10 chars
			        // (there are no spaces in each publ. name)
	int YEAR[100]; // max 100 publication years
	float PRICE[100]; // max 100 book prices
   };


The format of the file called in.1 is as follows:

	ISBN_1 TITLE_1 AUTHOR_1 PUBLISHER_1 YEAR_1 PRICE_1
	ISBN_2 TITLE_2 AUTHOR_2 PUBLISHER_2 YEAR_2 PRICE_2
	...
	ISBN_n TITLE_n AUTHOR_n PUBLISHER_n YEAR_n PRICE_n
	
where n (between 0 and 99 inclusive) is an integer representing the number of 
books in in.1 file. In in.1 file, only the ISBN numbers are unique.


\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

In the constructor BOOK_SEARCH can be instantiated as follows:

	BOOK_SEARCH b(x);

where integer x (between 0 and 99 inclusive) is the number of books in
in.1 file. The constructor BOOK_SEARCH should read the contents of in.1 file 
into the private data members of BOOK_SEARCH class.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

The definition of FIND_ISBN method is as follows:

        b.FIND_ISBN(x);

where integer x (0 < x < 999999) is the ISBN of a book to be searched in the 
database. If there is a book with the ISBN of x, the output to out.1 file is:

	FOUND THE BOOK WITH ISBN x:
	TITLE: t_x
	AUTHOR: a_x
	PUBLISHER: p_x
	YEAR: y_x
	PRICE: pr_x USD

where t_x, a_x, p_x are character strings, y_x is integer, and pr_x is a
floating point number.

If no such book exists, the output to out.1 is:

	NO BOOK WITH ISBN x HAS BEEN FOUND.

Make sure that every line into out.1 ends with an endl character.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

The definition of LIST_YEAR method is as follows:

        b.LIST_YEAR(x);

where integer x (1900 < x < 2007) is the publication year. All books published
in year x or after should be listed in out.1 with the following format:

	THE BOOKS PUBLISHED IN YEAR x OR LATER:
	TITLE: t_i
	YEAR: y_i
	...
	TITLE: t_j
	YEAR: y_j

where t_i, ..., t_j are character strings, and y_i, ..., y_j are integers.
These books are listed in the order they appear in the database.

If no books published in or after year x, the output to out.1 is:

	NO BOOKS PUBLISHED IN YEAR x OR LATER HAS BEEN FOUND.
	
Make sure that every line into out.1 ends with an endl character.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

The definition of LIST_BOOKS method is as follows:

        b.LIST_BOOKS(x, y);

where integer x (1900 < x < 2007) is the publication year and float y 
(0 < y < 1000) is the price of a book. All books published in year x or 
after with a price of y or less should be listed in out.1 with the following 
format:

	THE BOOKS PUBLISHED IN YEAR x OR LATER PRICED y USD OR CHEAPER:
	TITLE: t_i
	YEAR: y_i
	PRICE: p_i USD
	...
	TITLE: t_j
	YEAR: y_j
	PRICE: p_j USD

where t_i is a character string, y_i is an integer, and p_i is a float.
These books are listed in the order they appear in the database.

If no books published in or after year y, the output to out.1 is:

	NO BOOKS HAS BEEN FOUND WITH YEAR >= x AND PRICE <= y USD.
	
Make sure that every line into out.1 ends with an endl character.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_

If there are any errors in the input parameters (such as negative ISBN,
or too large price, etc.) the output to the out.1 is:

	INPUT ERROR. IGNORED THE INTERFACE CALL.

Make sure that every line into out.1 ends with an endl character.

\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_


grademe_p1 will create the main function automatically when you run it.
Your header file will be used by grademe_p1 as a header file called p1.h.
Three examples of main functions utilizing such a header are below.
:::::::::::::: EXAMPLE 1 ::::::::::::::::::::: 
---------CONTENTS OF main1.cc FILE:-----------
#include <iostream.h>
#include "p1.h"
// example program: main1.cc
int main ()
{
	BOOK_SEARCH b(5);  // instantiate an object b with 5 books

	b.FIND_ISBN(1133); 

	return 0;
}
---------CONTENTS OF in.1 FILE:---------------
1122	ROMAN_&_JULIET	SHIKSPEAR	PRACTICE_HALL	1991	11.99
1111	LIAR_KING	SHIKSPEAR	PRACTICE_HALL	1990	9.99
1133	WHO_CARES	BILL_GETS	MICRO_HARD	2000	0.99
1234	NICE_TITLE	DA_VINCI	HILEY_JOHNS	1999	29.99
1100	WHITE_STORIES	NEW_BUSH	WHITE_PRESS	2001	20.99
---------EXPECTED CONTENTS OF out.1 FILE:-----
FOUND THE BOOK WITH ISBN 1133:
TITLE: WHO_CARES
AUTHOR: BILL_GETS
PUBLISHER: MICRO_HARD
YEAR: 2000
PRICE: USD 0.99
:::::::::::::: EXAMPLE 2 ::::::::::::::::::::: 
---------CONTENTS OF main2.cc FILE:-----------
#include <iostream.h>
#include "p1.h"
// example program: main2.cc
int main ()
{
	BOOK_SEARCH b(5);  // instantiate an object b with 5 books

	b.LIST_YEAR(2000); 

	return 0;
}
---------CONTENTS OF in.1 FILE:---------------
1122	ROMAN_&_JULIET	SHIKSPEAR	PRACTICE_HALL	1991	11.99
1111	LIAR_KING	SHIKSPEAR	PRACTICE_HALL	1990	9.99
1133	WHO_CARES	BILL_GETS	MICRO_HARD	2000	0.99
1234	NICE_TITLE	DA_VINCI	HILEY_JOHNS	1999	29.99
1100	WHITE_STORIES	NEW_BUSH	WHITE_PRESS	2001	20.99
---------EXPECTED CONTENTS OF out.1 FILE:-----
THE BOOKS PUBLISHED IN YEAR 2000 OR LATER:
TITLE: WHO_CARES
YEAR: 2000
TITLE: WHITE_STORIES
YEAR: 2001
:::::::::::::: EXAMPLE 3 ::::::::::::::::::::: 
---------CONTENTS OF main3.cc FILE:-----------
#include <iostream.h>
#include "p1.h"
// example program: main3.cc
int main ()
{
	BOOK_SEARCH b(5);  // instantiate an object b with 5 books

	b.LIST_BOOKS(2000,10.00); 

	return 0;
}
---------CONTENTS OF in.1 FILE:---------------
1122	ROMAN_&_JULIET	SHIKSPEAR	PRACTICE_HALL	1991	11.99
1111	LIAR_KING	SHIKSPEAR	PRACTICE_HALL	1990	9.99
1133	WHO_CARES	BILL_GETS	MICRO_HARD	2000	0.99
1234	NICE_TITLE	DA_VINCI	HILEY_JOHNS	1999	29.99
1100	WHITE_STORIES	NEW_BUSH	WHITE_PRESS	2001	20.99
---------EXPECTED CONTENTS OF out.1 FILE:-----
THE BOOKS PUBLISHED IN YEAR 2000 OR LATER PRICED 10.00 USD OR CHEAPER:
TITLE: WHO_CARES
YEAR: 200
PRICE: 0.99 USD
